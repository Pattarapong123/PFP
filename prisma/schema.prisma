datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "wasm"
}



//
// ===================== ผู้ใช้ / ที่อยู่ / ออเดอร์ =====================
model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      String    @default("CUSTOMER")
  createdAt DateTime  @default(now())
  orders    Order[]
  addresses Address[]
}

model Address {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  type     String  @default("SHIPPING")
  line1    String
  line2    String?
  district String
  zone     String?
  province String
  postcode String
  country  String  @default("TH")
  phone    String?

  ordersShippedHere Order[] @relation("OrderShippingAddress")

  @@index([userId])
}

model Order {
  id                Int         @id @default(autoincrement())
  user              User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId            Int?
  status            String      @default("PENDING")
  totalCents        Int         @default(0)
  paymentMethod     String
  paymentRef        String?

  shippingAddress   Address?    @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  shippingAddressId Int?

  paymentSlipUrl    String?
  paidAt            DateTime?
  shippedAt         DateTime?
  trackingCarrier   String?
  trackingNo        String?

  createdAt         DateTime    @default(now())
  items             OrderItem[]

  @@index([createdAt])
  @@index([status])
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        Int
  product        Product @relation(fields: [productId], references: [id])
  productId      Int
  qty            Int
  unitPriceCents Int     @default(0)
  discountCents  Int     @default(0)

  @@index([orderId])
  @@index([productId])
}

//
// ===================== สินค้า / หมวดหมู่ / หน่วย / สต๊อก =====================
model Product {
  id          Int               @id @default(autoincrement())
  sku         String?
  name        String
  slug        String            @unique
  description String
  priceCents  Int               @default(0)
  stockQty    Int               @default(0)
  status      String            @default("ACTIVE")

  images      ProductImage[]

  categories  ProductCategory[]

  primaryCategory    Category?  @relation("PrimaryCategory", fields: [primaryCategoryId], references: [id])
  primaryCategoryId  Int?

  unit        Unit?             @relation(fields: [unitId], references: [id])
  unitId      Int?

  movements   StockMovement[]
  orderItems  OrderItem[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt   // ★ แก้ตรงนี้

  @@index([sku])
  @@index([unitId])
  @@index([primaryCategoryId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  sortOrder Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([productId, sortOrder])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique

  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryToCategory")

  products    ProductCategory[]
  primaryOf   Product[]  @relation("PrimaryCategory")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt   // ★ แก้ตรงนี้

  @@index([parentId])
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String
  shortName String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt   // ★ แก้ตรงนี้

  products  Product[]
}

model StockMovement {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  change    Int
  reason    String?
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([createdAt])
}

//
// ===================== ผลงาน (Portfolio) =====================
model Portfolio {
  id               Int               @id @default(autoincrement())
  title            String
  slug             String            @unique
  body             String            @default("")
  summary          String            @default("")
  content          String            @default("")
  featuredImageUrl String?
  publishedAt      DateTime?
  tags             PortfolioTagMap[]
  images           PortfolioImage[]
}

model PortfolioImage {
  id          Int       @id @default(autoincrement())
  url         String
  altText     String?
  sortOrder   Int       @default(0)
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId Int

  @@index([portfolioId, sortOrder])
}

model PortfolioTag {
  id   Int               @id @default(autoincrement())
  name String
  slug String            @unique
  maps PortfolioTagMap[]
}

model PortfolioTagMap {
  portfolio   Portfolio    @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId Int
  tag         PortfolioTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       Int

  @@id([portfolioId, tagId])
  @@index([portfolioId])
  @@index([tagId])
}

//
// ===================== กิจกรรม =====================
model ActivityLog {
  id        Int      @id @default(autoincrement())
  type      String
  action    String
  refId     Int?
  message   String
  createdAt DateTime @default(now())
}
